"""
Задание 1.

Приведен код, который позволяет сохранить в
массиве индексы четных элементов другого массива

Сделайте замеры времени выполнения кода с помощью модуля timeit

Оптимизируйте, чтобы снизить время выполнения
Проведите повторные замеры

Добавьте аналитику: что вы сделали и почему!!!
Без аналитики задание считается не принятым
"""
import timeit


def func_1(nums):
    new_arr = []
    for i in range(len(nums)):
        if nums[i] % 2 == 0:
            new_arr.append(i)
    return new_arr


def func_2(nums):
    return [i for i, k in enumerate(nums) if k % 2 == 0]


new_list = [i for i in range(0, 100)]

a = timeit.timeit("func_1(new_list)", setup="from __main__ import func_1, new_list")
print(f"Время работы первой функции при работе со списком из {len(new_list)} элементов составляет {a}")
#   Среднее время работы 7.8 - 8.05

b = timeit.timeit("func_2(new_list)", setup="from __main__ import func_2, new_list")
print(f"Время работы второй функции при работе со списком из {len(new_list)} элементов составляет {b}")
#   Среднее время работы 6.6 - 6.8

# Вторая функция оптимизирована за счет функции enumerate, которая генерирует кортеж, состоящий из индекса и значения
# (по сути хеш-таблица), поэтому его обход по индексам и получение значений поизводится быстрее
